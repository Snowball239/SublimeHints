<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <link rel="stylesheet" type="text/css" href="../static/reset.css"/>
    <link rel="stylesheet" type="text/css" href="../static/layout.css"/>
    
    <link rel="stylesheet" href="http://yandex.st/highlightjs/7.3/styles/monokai.min.css"/>
    <script src="http://yandex.st/highlightjs/7.3/highlight.min.js"></script>
    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
                    // turn on hints highlighting
                    $('.hint').each(function () {
                        $(this).hover(function() {
                            $(this).toggleClass('highlighted')
                        });
                        var hintID = $(this).attr('class').split(' ')[1];
                        $(this).find('p').hover(function () {
                            $('span.' + hintID).toggleClass('highlighted');
                        })
                    })
                    // then code highlighting
                    $("pre code").each(function (i, e) {
                        hljs.highlightBlock(e)
                    });
                }
        )
    </script>
    <title> Spam! </title>
</head>
<body>
<div id="container">
    <div id="header">
        <h1></h1>
    </div>
    <div id="column-wrap">
        <div id="code-pane">
            <pre><code><span class="hint0"># vim</span><span class="hint0 hint1">: set fileencod</span><span class="hint0">ing=utf-8 </span><span class="hint2">:

from jinja2 import Environment, FileSystemLoader, escape, Markup, c</span>ontextfilter
env = Environment(loader=FileSystemLoader(&#39;templates/&#39;))

SAMPLE_HINTS = [
    {&#39;places&#39;: [(0, 30), (500, 600)], &#39;content&#39;: &#39;Take a look&#39;},
    {&#39;places&#39;: [(5, 20)], &#39;content&#39;: &#39;Nice solution!&#39;},
    {&#39;places&#39;: [(30, 100)], &#39;content&#39;: &#39;Spam!&#39;},
]

@contextfilter
def inject_hints(context, code):
    if &#39;hints&#39; not in context:
        return escape(code)
    hints = context.resolve(&#39;hin<span class="hint0">ts&#39;)
    bounds = {0, len(code)}
    for hint in hints:
        bounds.update(*hint[&#39;places&#39;])
    b</span>ounds = sorted(list(bounds))
    regions = zip(bounds[:-1], bounds[1:])
    code_chunks = []
    for start, end in regions:
        escaped_fragment = escape(code[start:end])
        if not escaped_fragment:
            continue
        classes = []
        for i, hint in enumerate(hints):
            if filter(lambda p: p[0] &lt;= start and end &lt;= p[1], hint[&#39;places&#39;]):
                classes.append(&#39;hint%d&#39; % i)
        if classes:
            escaped_fragment = &#39;&lt;span class=&#34;%s&#34;&gt;%s&lt;/span&gt;&#39; % (&#39; &#39;.join(classes), escaped_fragment)
        code_chunks.append(escaped_fragment)

    preprocessed = &#39;&#39;.join(code_chunks)
    if context.eval_ctx.autoescape:
        return Markup(preprocessed)
    return preprocessed

env.filters[&#39;inject_hints&#39;] = inject_hints

def main():
    with open(&#39;main.py&#39;) as source_file:
        source = source_file.read()

    env.get_template(&#39;layout.xhtml&#39;).stream(
        title=&#39;Spam!&#39;,
        code=source,
        hints=SAMPLE_HINTS
    ).dump(&#39;output/rendered.xhtml&#39;, encoding=&#39;utf-8&#39;)

if __name__ == &#39;__main__&#39;:
    main()
</code></pre>
        </div>
        <div id="hints-pane">
            
                <div class="hint hint0">


                    <div class="content">
                        <p>Take a look</p>
                    </div>
                </div>
            
                <div class="hint hint1">


                    <div class="content">
                        <p>Nice solution!</p>
                    </div>
                </div>
            
                <div class="hint hint2">


                    <div class="content">
                        <p>Spam!</p>
                    </div>
                </div>
            

        </div>
    </div>
</div>
</body>
</html>